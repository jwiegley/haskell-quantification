#+TITLE:  Quantification in Haskell
#+AUTHOR: John Wiegley
#+EMAIL:  johnw@newartisans.com
#+DATE:   14 Mar 2017

#+DESCRIPTION: An intermediate guide to understanding quantification in Haskell
#+KEYWORDS: lens haskell functional programming
#+LANGUAGE: en

\setbeamertemplate{footline}{}
\setbeamerfont{block body}{size=\small}
\definecolor{orchid}{RGB}{134, 134, 220}
\setbeamercolor{block title}{fg=white,bg=orchid}
\setbeamercolor{bgcolor}{fg=white,bg=blue}

* Overview
** Overview
1. Basic syntax
2. GHC extensions
3. Some theory
4. Parametricity
5. The ST Monad
*** note                                                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
This is a note.
* Basic syntax
** Universals
*** Math
\[ ∀ a, a \]
*** Haskell
:PROPERTIES:
:BEAMER_act: <2->
:END:
#+begin_src haskell
forall a. a
#+end_src
** Meaning
*** As a universal
#+begin_src haskell
forall a. a
#+end_src
*** In other words...
:PROPERTIES:
:BEAMER_act: <2->
:END:
#+begin_src haskell
undefined
#+end_src
* GHC extensions
** GHC flags
*** -Wunused-foralls
Emits a warning in the specific case that a user writes explicit forall syntax
with unused type variables.
*** -fprint-explicit-foralls
:PROPERTIES:
:BEAMER_act: <2->
:END:
Makes GHC print explicit forall quantification at the top level of a type;
normally this is suppressed.
** ExplicitForAll
#+begin_src haskell
{-# LANGUAGE ExplicitForAll #-}

foo :: forall a b. a -> b
foo = undefined
#+end_src
** ExplicitForAll
#+begin_src haskell
{-# LANGUAGE ExplicitForAll #-}

foo :: forall a. a -> forall b. b
foo = undefined
#+end_src
** RankNTypes
#+begin_src haskell
{-# LANGUAGE RankNTypes #-}

bar :: (forall r s. r -> s) -> a -> b
bar f a = f a
#+end_src
** RankNTypes (Lens)
#+begin_src haskell
type Lens' s a =
  forall f. Functor f
    => (a -> f a) -> s -> f s

_fst :: Lens' (Int, Int) Int
_fst f (x, y) = (,y) <$> f x

_fst :: Functor f
     => (Int -> f Int)
     -> (Int, Int)
     -> f (Int, Int)
#+end_src
** RankNTypes (Lens)
#+begin_src haskell
type Lens' s a =
  forall f. Functor f
    => (a -> f a) -> s -> f s

hmm :: Lens' (Int, Int) Int
    -> (Int, Int) -> Int
hmm l p = getConst $ l Const p

hmm :: (forall f. Functor f
          => (Int -> f Int)
          -> (Int, Int)
          -> f (Int, Int))
    -> (Int, Int)
    -> Int
#+end_src
** ExistentialQuantification
#+begin_src haskell
{-# LANGUAGE ExistentialQuantification #-}

data Exists = forall a. Exists a
#+end_src
*** note                                                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Not the same as storing =undefined=.
** RankNTypes
We'll come back to why this works, but we can use the /final encoding/ of the
universal to represent an existential. \\
#+begin_src haskell
{-# LANGUAGE RankNTypes #-}

newtype Exists = Exists {
  getExists ::
    forall r. (forall a. a -> r) -> r
}
#+end_src
** GADTSyntax or GADTs
GADT syntax can also be used to encode existentials, without needing the full
power of GADTs. \\
#+begin_src haskell
{-# LANGUAGE GADTSyntax #-}

data Exists where
  Exists :: a -> Exists
#+end_src
** ScopedTypeVariables
#+begin_src haskell
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}

baz :: forall s. Reifies s Int
    => Tagged s Int -> Int
baz (Tagged n) =
  n + reflect (Proxy :: Proxy s)
#+end_src
** ImpredicativeTypes (Avoid!)
#+begin_src haskell
{-# LANGUAGE ImpredicativeTypes #-}

type T = (Int, forall a. a -> Int)
#+end_src
** ImpredicativeTypes (Avoid!)
#+begin_src haskell
{-# LANGUAGE ImpredicativeTypes #-}

type TLens = (Int, Lens' (Int, Int) Int)
#+end_src
** ImpredicativeTypes (Solution)
#+begin_src haskell
{-# LANGUAGE RankNTypes #-}

newtype Wrapped r = Wrapped {
  getWrapped :: forall a. a -> r
}

type T = (Int, Wrapped Int)
#+end_src
* Some theory
** Negation
*** Math
\[ ∀ a, ¬ a \]
*** Haskell
:PROPERTIES:
:BEAMER_act: <2->
:END:
#+begin_src haskell
forall a r. a -> r
#+end_src
*** note                                                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Only =unsafeCoerce= has this type.
** Existentials
*** Math
\[ ∃ a, a \]
*** Haskell?
:PROPERTIES:
:BEAMER_act: <2->
:END:
#+begin_src haskell
exists a. a
#+end_src
** Existentials
*** Haskell
#+begin_src haskell
forall r. (forall a. a -> r) -> r
#+end_src
** Relationships
\begin{center}
\begin{tabular}{ r @{\ \ \,\( \Longleftrightarrow \)\,\ \ } r }
\(   ∀ a, a \) & \( ¬ ∃ a, ¬ a \) \\
\(   ∃ a, a \) & \( ¬ ∀ a, ¬ a \) \\
\( ¬ ∀ a, a \) & \(   ∃ a, ¬ a \) \\
\( ¬ ∃ a, a \) & \(   ∀ a, ¬ a \)
\end{tabular}
\end{center}
** Derivation
\begin{align*}
∃ a, a &= ¬ ∀ a, ¬ a            \\
       &= ∀ r, (∀ a, ¬ a) → r   \\
       &= ∀ r, (∀ a, a → r) → r 
\end{align*}
*** note                                                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
I could show the Coq code now.
* Parametricity
** Generic programming
*** Concrete
#+begin_src haskell
sort :: [Int] -> [Int]
#+end_src
*** General
:PROPERTIES:
:BEAMER_act: <2->
:END:
#+begin_src haskell
sort :: Ord a => [a] -> [a]
#+end_src
** Generic programming (C++)
*** Concrete
#+begin_src c++
void stable_sort(
  std::vector<Int>::iterator,
  std::vector<Int>::iterator
);
#+end_src
** Generic programming (C++)
:PROPERTIES:
:BEAMER_act: <2->
:END:
=RandomIterator= must meet the requirements of =ValueSwappable= and
=RandomAccessIterator=.
*** General
#+begin_src haskell
template <typename RandomIterator>
void stable_sort(RandomIterator first,
                 RandomIterator last);
#+end_src
*** note                                                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Mention concepts.
** Generic programming (Java)
*** Concrete
#+begin_src java
class MySorter {
  public static void sort(List<Int> list);
};
#+end_src
** Generic programming (Java)
:PROPERTIES:
:BEAMER_act: <2->
:END:
*** General
#+begin_src java
class MySorter {
  public static
    <T extends Comparable<? super T>>
      void sort(List<T> list);
};
#+end_src
*** note                                                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Mention concepts.
** Information hiding
#+begin_src haskell
data Machine i l o = forall s. Machine
  { monitorState :: s
  , monitorFunc  ::
      i -> StateT s (Writer [l]) o
  }
#+end_src
** Parametricity
#+begin_src haskell
foo :: (a -> b) -> [a] -> [b]
foo = ...
#+end_src
* The ST Monad
** The ST Monad
Over to Emacs\dots{}
* Colophon

#+STARTUP: beamer
#+STARTUP: content fninline hidestars

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [utf8x,notes,17pt]

#+BEAMER_THEME: [height=16mm] Rochester
#+BEAMER_COLOR: seahorse

#+OPTIONS:   H:2 toc:nil

#+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}
#+BEAMER_HEADER: \usepackage{courier}
#+BEAMER_HEADER: \usepackage{helvet}

#+BEAMER_HEADER: \usepackage{pdfcomment}
#+BEAMER_HEADER: \renewcommand{\note}[1]{\marginnote{\pdfcomment[icon=note]{#1}}}

#+BEAMER_HEADER: \usepackage{mathtools}
#+BEAMER_HEADER: \SetUnicodeOption{mathletters}
#+BEAMER_HEADER: \DeclareUnicodeCharacter{952}{\theta}

#+BEAMER_HEADER: \usepackage{minted}

# #+name: setup-minted
# #+begin_src emacs-lisp :exports both :results silent
# (setq org-latex-listings 'minted)
# (setq org-latex-minted-options
#       '(("fontsize" "\\footnotesize")
#         ("linenos" "true")))
# #+end_src

#+BEAMER_HEADER: \newcommand{\head}[1]{\begin{center}
#+BEAMER_HEADER: \vspace{13mm}\hspace{-1mm}\Huge{{#1}}
#+BEAMER_HEADER: \end{center}}

#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)
